<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="txtPrerrequisito.Text" xml:space="preserve">
    <value>--------------------------------------SQL Server------------------------------------------------
CREATE  PROCEDURE  GET_TABLENAME
@NOMBRE VARCHAR(50)
AS
BEGIN
    SELECT  TABLE_NAME as 'WASTE'
    FROM 	  INFORMATION_SCHEMA.TABLES
    WHERE   TABlE_TYPE = 'BASE TABLE'	
    AND     TABLE_NAME &lt;&gt; 'dtproperties'
  AND (RTRIM(ISNULL(@NOMBRE,''))='' OR (TABLE_NAME LIKE '%'+@NOMBRE+'%'))

END
GO

CREATE FUNCTION dbo.fnIsColumnPrimaryKey
    (@sTableName varchar(128), @sColumnName varchar(128))
RETURNS bit
AS
BEGIN
    DECLARE  @nTableID int,
             @nIndexID int,
             @i int
    
    SET  @nTableID = OBJECT_ID(@sTableName)

    SELECT  @nIndexID = indid
    FROM    sysindexes
    WHERE   id = @nTableID
    AND     indid BETWEEN 1 And 254 AND (status &amp; 2048) = 2048
    ORDER BY indid
	
    IF (@nIndexID  Is Null)
    RETURN 0

    IF @sColumnName IN
        (SELECT sc.[name]
         FROM       sysindexkeys sik
         INNER JOIN syscolumns sc ON sik.id = sc.id AND sik.colid = sc.colid
         WHERE      sik.id = @nTableID
         AND        sik.indid = @nIndexID)
    BEGIN
        RETURN 1
    END

    RETURN 0
END
GO

grant exec on fnIsColumnPrimaryKey to public
GO

CREATE  PROCEDURE GET_METADATA
@TABLE_NAME VARCHAR(200),
@NOMBRE VARCHAR(50)

AS
BEGIN

    SELECT    COLUMN_NAME,
              DATA_TYPE,
              IS_NULLABLE,
              isnull(CHARACTER_MAXIMUM_LENGTH,0) as MAZSIZE,
              ISNULL((SELECT TOP 1 'Y' FROM SYSFOREIGNKEYS WHERE FKEYID =ID AND FKEY=COLID),'N') as 'IsForeignKey',
              Ordinal_Position,
              dbo.fnIsColumnPrimaryKey(@TABLE_NAME,COLUMN_NAME) AS 'IsPK'
	
    FROM    SYSCOLUMNS,
            (SELECT  COLUMN_NAME,
                     IS_NULLABLE,
                     DATA_TYPE,
                     CHARACTER_MAXIMUM_LENGTH,
                     Ordinal_Position
             FROM    INFORMATION_SCHEMA.COLUMNS
             WHERE  TABLE_NAME =@Table_Name) AS A
	
    WHERE   ID  
    IN      (SELECT  ID 
             FROM    SYSOBJECTS
             WHERE  TYPE='U'  AND NAME =@Table_Name ) 

    AND     A.COLUMN_NAME =NAME
    AND     SYSCOLUMNS.ID=OBJECT_ID(@TABLE_NAME)
    Order By  Ordinal_Position
END
GO
-----------------------------------------------------------------------------------------------
-------------------------------------------MySQL-----------------------------------------------

DELIMITER $$

DROP PROCEDURE IF EXISTS `GET_METADATA` $$
CREATE PROCEDURE `GET_METADATA`(TABLE_NAME VARCHAR(200) ,NOMBRE VARCHAR(50))
BEGIN
    SELECT  COLUMN_NAME,
            DATA_TYPE,
            IS_NULLABLE,
            COALESCE(CHARACTER_OCTET_LENGTH,0) AS MAZSIZE,
            'N' AS ISFOREIGNKEY,
            Ordinal_Position,
            (CASE COLUMN_KEY WHEN 'PRI' THEN 1 ELSE 0 END) AS 'IsPK'
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_SCHEMA = NOMBRE
    AND INFORMATION_SCHEMA.COLUMNS.TABLE_NAME = TABLE_NAME
    ORDER BY Ordinal_Position;
END $$

DELIMITER ;


DELIMITER $$

DROP PROCEDURE IF EXISTS `GET_TABLENAME` $$
CREATE PROCEDURE `GET_TABLENAME`(NOMBRE VARCHAR(50))
BEGIN
    SELECT    TABLE_NAME as 'WASTE'
    FROM      INFORMATION_SCHEMA.TABLES
    WHERE  TABlE_TYPE = 'BASE TABLE'
    AND TABLE_SCHEMA = NOMBRE;
END $$

DELIMITER ;
-----------------------------------------------------------------------------------------------------
------------------------------------------PostgreSQL---------------------------------------------

CREATE OR REPLACE FUNCTION ColumnPrimaryKey(character varying(30),character varying(30)) RETURNS int
LANGUAGE sql
AS $$
	 SELECT  (CASE WHEN (SELECT  count(at.attname)
          FROM pg_namespace nr, pg_class r, pg_attribute at, pg_namespace nc,
               pg_constraint c
          WHERE nr.oid = r.relnamespace
            AND r.oid = at.attrelid
            AND nc.oid = c.connamespace
            AND r.relname=$1
            AND at.attname=$2
            AND (CASE WHEN c.contype = 'f' THEN r.oid = c.confrelid AND at.attnum = ANY (c.confkey)
                      ELSE r.oid = c.conrelid AND at.attnum = ANY (c.conkey) END)
            AND NOT at.attisdropped
            AND c.contype IN ('p')
            AND r.relkind = 'r' ) =0 THEN 0 ELSE 1 END)

$$;


CREATE OR REPLACE FUNCTION ColumnForeignKey(character varying(30),character varying(30)) RETURNS int
LANGUAGE sql
AS $$
	 SELECT  (CASE WHEN (SELECT count(a.attname) AS column_name
    FROM pg_attribute a,
         (SELECT r.oid AS roid, r.relname, nc.nspname AS nc_nspname,
                 nr.nspname AS nr_nspname,
                 c.oid AS coid, c.conname, c.contype, c.confkey, c.confrelid,
                 _pg_expandarray(c.conkey) AS x
          FROM pg_namespace nr, pg_class r, pg_namespace nc,
               pg_constraint c
          WHERE nr.oid = r.relnamespace
                AND r.oid = c.conrelid
                AND nc.oid = c.connamespace
                AND c.contype IN ('u', 'f')
                AND r.relkind = 'r'
                AND (NOT pg_is_other_temp_schema(nr.oid))
                AND (pg_has_role(r.relowner, 'USAGE')
                     OR has_table_privilege(r.oid, 'SELECT')
                     OR has_table_privilege(r.oid, 'INSERT')
                     OR has_table_privilege(r.oid, 'UPDATE')
                     OR has_table_privilege(r.oid, 'REFERENCES')) ) AS ss
    WHERE ss.roid = a.attrelid
          AND relname=$1
          AND a.attname =$2
          AND a.attnum = (ss.x).x
          AND NOT a.attisdropped ) =0 THEN 0 ELSE 1 END)

$$;

CREATE OR REPLACE FUNCTION GET_TABLENAME(character varying(30)) RETURNS SETOF RECORD
LANGUAGE sql STRICT STABLE
    AS $$
    SELECT (c.relname) AS table_name
    FROM pg_namespace nc, pg_class c
    WHERE c.relnamespace = nc.oid
    AND c.relkind IN ('r', 'v')
    AND nc.nspname = 'public'
$$;


CREATE OR REPLACE FUNCTION GET_METADATA(character varying(30),character varying(30)) RETURNS SETOF RECORD
    LANGUAGE sql STRICT STABLE
    AS $$

    SELECT a.attname AS column_name,
           (CASE WHEN t.typtype = 'd' THEN
            CASE WHEN bt.typelem &lt;&gt; 0 AND bt.typlen = -1 THEN 'ARRAY'
                 WHEN nbt.nspname = 'pg_catalog' THEN format_type(t.typbasetype, null)
                 ELSE 'USER-DEFINED' END
            ELSE
            CASE WHEN t.typelem &lt;&gt; 0 AND t.typlen = -1 THEN 'ARRAY'
                 WHEN nt.nspname = 'pg_catalog' THEN format_type(a.atttypid, null)
            ELSE 'USER-DEFINED' END
            END) AS data_type,
           (CASE WHEN a.attnotnull OR (t.typtype = 'd' AND t.typnotnull) THEN 'NO' ELSE 'YES' END) AS is_nullable,
           _pg_char_max_length(_pg_truetypid(a, t), _pg_truetypmod(a, t)) AS size,
           ColumnForeignKey(CAST(c.relname AS character varying(30)),CAST(a.attname AS character varying(30))) AS IsForeignKey,
           a.attnum AS ordinal_position,
           ColumnPrimaryKey(CAST(c.relname AS character varying(30)),CAST(a.attname AS character varying(30))) AS IsPK
    FROM (pg_attribute a LEFT JOIN pg_attrdef ad ON attrelid = adrelid AND attnum = adnum),
          pg_class c, pg_namespace nc,
         (pg_type t JOIN pg_namespace nt ON (t.typnamespace = nt.oid))
           LEFT JOIN (pg_type bt JOIN pg_namespace nbt ON (bt.typnamespace = nbt.oid))
           ON (t.typtype = 'd' AND t.typbasetype = bt.oid)
    WHERE a.attrelid = c.oid
    AND a.atttypid = t.oid
    AND nc.oid = c.relnamespace
    AND (NOT pg_is_other_temp_schema(nc.oid))
    AND c.relname = $1
    AND a.attnum &gt; 0 AND NOT a.attisdropped AND c.relkind in ('r', 'v')
    AND nc.nspname='public'
    AND (pg_has_role(c.relowner, 'USAGE')
    OR has_table_privilege(c.oid, 'SELECT')
    OR has_table_privilege(c.oid, 'INSERT')
    OR has_table_privilege(c.oid, 'UPDATE')
    OR has_table_privilege(c.oid, 'REFERENCES') )
$$;</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>25</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAgAQAAAAAAAAAAAAAAAEAAAAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAMDcwADwyqYAzP//AJn//wBm//8AM///AP/M
        /wDMzP8Amcz/AGbM/wAzzP8AAMz/AP+Z/wDMmf8AmZn/AGaZ/wAzmf8AAJn/AP9m/wDMZv8AmWb/AGZm
        /wAzZv8AAGb/AP8z/wDMM/8AmTP/AGYz/wAzM/8AADP/AMwA/wCZAP8AZgD/ADMA/wD//8wAzP/MAJn/
        zABm/8wAZv/MADP/zAAA/8wA/8zMAMzMzACZzMwAZszMADPMzAAAzMwA/5nMAMyZzACZmcwAZpnMADOZ
        zAAAmcwA/2bMAMxmzACZZswAZmbMADNmzAAAZswA/zPMAMwzzACZM8wAZjPMADMzzAAAM8wA/wDMAMwA
        zACZAMwAZgDMADMAzAAAAMwA//+ZAMz/mQCZ/5kAZv+ZADP/mQAA/5kA/8yZAMzMmQCZzJkAZsyZADPM
        mQAAzJkA/5mZAMyZmQCZmZkAZpmZADOZmQAAmZkA/2aZAMxmmQCZZpkAZmaZADNmmQAAZpkA/zOZAMwz
        mQCZM5kAZjOZADMzmQAAM5kA/wCZAMwAmQCZAJkAZgCZADMAmQAAAJkA//9mAMz/ZgCZ/2YAZv9mADP/
        ZgAA/2YA/8xmAMzMZgCZzGYAZsxmADPMZgAAzGYA/5lmAMyZZgCZmWYAZplmADOZZgAAmWYA/2ZmAMxm
        ZgCZZmYAZmZmADNmZgAAZmYA/zNmAMwzZgCZM2YAZjNmADMzZgAAM2YA/wBmAMwAZgCZAGYAZgBmADMA
        ZgAAAGYA//8zAMz/MwCZ/zMAZv8zADP/MwAA/zMA/8wzAMzMMwCZzDMAZswzADPMMwAAzDMA/5kzAMyZ
        MwCZmTMAZpkzADOZMwAAmTMA/2YzAMxmMwCZZjMAZmYzADNmMwAAZjMA/zMzAMwzMwCZMzMAZjMzADMz
        MwAAMzMA/wAzAMwAMwCZADMAZgAzADMAMwAAADMAzP8AAJn/AABm/wAAM/8AAP/MAADMzAAAmcwAAGbM
        AAAzzAAAAMwAAP+ZAADMmQAAmZkAAGaZAAAzmQAAAJkAAP9mAADMZgAAmWYAAGZmAAAAZgAAM2YAAP8z
        AADMMwAAmTMAAGYzAAAzMwAAADMAAMwAAACZAAAAZgAAADMAAAAAAN0AAAC7AAAAqgAAAIgAAAB3AAAA
        VQAAAEQAAAAiAADdAAAAuwAAAKoAAACIAAAAdwAAAFUAAABEAAAAIgAA3d3dAFVVVQB3d3cAd3d3AERE
        RAAiIiIAERERAHcAAABVAAAARAAAACIAAADw+/8ApKCgAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAOzs7OwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATEx8fAOzs
        7OwAAAAAAAAAAAAAAAAAAAAAAAAAAAATSBMTHx8fAADs7OzsAAAAAAAAAAAAAAAAAAAAAAAAExNIExMf
        Hx8APwDs7Ozs7AAAAAAAAAAAAAAAXFyysgATE0gTEx8fHwA/cQDs7Ozs7OwAAAAAAAAAXLJcXLKyABMT
        SBMTHx8fAD9xcQDs7Ozs7AAAAAAAAFxcslxcsrIAExNIExMfHx8AP3FxAOzs7AAAAAAAAAAAXFyyXFyy
        sgATE0gTEx8fHwA/cXEA7AAAAAAAAAAAAABcXLJcXLKyABMTSBMTHx8fAD9xcQAAAAAAAAAAAAAAAFxc
        slxcsrIAExNIExNISEgAP3FxAAAAAAAAAAAAAAAAXFyyXFyysgATE0gTExNISAA/cXEAAAAAAAAAAAAA
        AABcXLJcXLIAExMTExMTEx9IAD9xcQAAAAAAAAAAAAAAAFxcslxcsgATExMTExMTHx9IAHFxAAAAAAAA
        AAAAAAAAXFyyXFxcABMTExMTExMfHx8APwAAAAAAAAAAAAAAAFxcXFxcXFwAExMTExMTEx8fHwA/cQAA
        AAAAAAAAAAAAXFxcXFxcXAATExMTExMTHx8fAD9xcQAAAAAAAAAAAABcXFxcXFxcABMTExMTExMfHx8A
        P3FxAAAAAAAAAAAAAFxcXFxcXFwAExMTExMTEx8fHwA/cXEAAAAAAAAAAAAAXFxcXFxcXAATExMTE///
        Hx8fAD9xcQAAAAAAAAAAAABcXFxcXFxcABMTE///ERERER8AP3FxAAAAAAAAAAAAAFxcXFxcXFwAE///
        Hx8fHx8fEQA/cXEAAAAAAAAAAAAAXFxcXFz//wAAEewAAAAAHwAA/z9xcQAAAAAAAAAAAABcXFz//zEx
        MQARAOzs7+wA/xUVFRVxAAAAAAAAAAAAAFz//7KysrKysvHv9/f37O8AcXFxcRUAAAAAAAAAAAAAADHs
        AAAAALIA8Pfr6wdd7wAAAHEAAAAAAAAAAAAAAAAAMQDs7O/sAADx6///6/fsAO/sAAAAAAAAAAAAAAAA
        AADx7/f39+zvAPDr///r9+8A9+zvAAAAAAAAAAAAAAAAAPD36+sHXe8AAPDrB13v8esHXe8AAAAAAAAA
        AAAAAAAA8ev//+v37AAAAPHxAO///+v37AAAAAAAAAAAAAAAAADw6///6/fvAAAAAADw6///6/fvAAAA
        AAAAAAAAAAAAAADw6wdd7/EAAAAAAADw6wdd7/EAAAAAAAAAAAAAAAAAAADx8QDvAAAAAAAAAADx8QDv
        AAAAAAAAAAAAAP/+Af//+AD//+AAP/4AAA/4AAAD4AAAA+AAAA/gAAA/4AAAf+AAAH/gAAB/4AAAf+AA
        AH/gAAB/wAAAf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP+AAAH/gEAH/8AAA//AI
        AP/wDAD/8A8A//gfgf/8P8P/
</value>
  </data>
</root>